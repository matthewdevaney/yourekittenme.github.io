<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Matthew Devaney - Web Development</title><link href="/" rel="alternate"></link><link href="/feeds/web-development.atom.xml" rel="self"></link><id>/</id><updated>2019-03-12T12:00:00-05:00</updated><entry><title>Custom Domains With Github Pages And Google Domains</title><link href="/posts/2019/03/12/custom-domains-with-github-pages-and-google-domains/" rel="alternate"></link><published>2019-03-12T12:00:00-05:00</published><updated>2019-03-12T12:00:00-05:00</updated><author><name>Matthew Devaney</name></author><id>tag:None,2019-03-12:/posts/2019/03/12/custom-domains-with-github-pages-and-google-domains/</id><summary type="html">&lt;p&gt;Which web address would you rather own: &lt;em&gt;yourdomain.github.io&lt;/em&gt; or &lt;em&gt;yourdomain.com&lt;/em&gt;?  The answer is simple: &lt;em&gt;yourdomain.com&lt;/em&gt;.  If you are hosting your website on a free service such as &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; you'll be assigned the former, not the latter.  Fortunately domain names are inexpensive to purchase (if they …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Which web address would you rather own: &lt;em&gt;yourdomain.github.io&lt;/em&gt; or &lt;em&gt;yourdomain.com&lt;/em&gt;?  The answer is simple: &lt;em&gt;yourdomain.com&lt;/em&gt;.  If you are hosting your website on a free service such as &lt;a href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; you'll be assigned the former, not the latter.  Fortunately domain names are inexpensive to purchase (if they are available).  Depending on the provider the annual cost is usually between $10-20.  When comparing the amount you'll spend vs. the benefits you'll receive its easy to justify purchase your own domain.&lt;/p&gt;
&lt;p&gt;In this tutorial I will show you how to configure your Github Pages website to be served from a custom domain from &lt;a href="https://domains.google"&gt;Google Domains&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Prequisites&lt;/h4&gt;
&lt;p&gt;You will need to own a custom domain purchased from Google Domains and have a free static website already setup on Github Pages.&lt;/p&gt;
&lt;h4&gt;Goals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Make your Github Pages website available on yourdomain.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Setting Up A Custom Domain&lt;/h3&gt;
&lt;p&gt;After you have acquired domain name from Google Domains go ahead and login.  The first thing we will do is setup our domain name servers (DNS). Click the DNS button on the menu to browse to the next page.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/google_domains_tutorial_1.png"&gt;&lt;/p&gt;
&lt;p&gt;The best analogy I can offer for DNS it that it works like a giant phonebook for the internet.  DNS converts domain names to IP addresses.  A web browser needs an IP address to connect to a webpage but they are hard to remember (e.g. 192.168.0.100). DNS allows us to type something like &lt;em&gt;yourdomain.com&lt;/em&gt; instead which is then routed to the proper IP address. &lt;/p&gt;
&lt;p&gt;Look around the DNS menu until you find the Custom resource records section.  Fill-in the fields as shown in the image below and then click add.  Github Pages IP addresses are unlikely to have changed since this article was written but you can research the most up to date IP addresses &lt;a href="https://help.github.com/en/articles/troubleshooting-custom-domains"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/google_domains_tutorial_2.png"&gt;&lt;/p&gt;
&lt;p&gt;We have now setup an &lt;em&gt;A record&lt;/em&gt; which points a domain to an IP address.  In this case we have pointed to multiple IP addresses because Github Pages has several servers and our website could be stored on any one of them.  A value of 1H was chosen for TTL: time-to-live.  This determines how long until changes to the DNS record go into effect&lt;/p&gt;
&lt;p&gt;A DNS record for CNAME should also be setup.  CNAME is short for canonical name and it allows us to refer one variation of our domain name to another.  A visitor to our website would input our web address in the browser one of two ways: &lt;em&gt;yourdomain.com&lt;/em&gt; or &lt;em&gt;www.yourdomain.com&lt;/em&gt;.  We have already setup &lt;em&gt;yourdomain.com&lt;/em&gt; using the &lt;em&gt;A record&lt;/em&gt;.  By setting up a CNAME record for &lt;em&gt;www.yourdomain.com&lt;/em&gt; we can redirect it to &lt;em&gt;yourdomain.com&lt;/em&gt; eliminating the need to maintain two records.&lt;/p&gt;
&lt;p&gt;Fill-in the DNS record for CNAME as shown below and click add.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/google_domains_tutorial_3.png"&gt;&lt;/p&gt;
&lt;p&gt;Your DNS records should look like this.  Make sure your setup matches the image below before you move on.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/google_domains_tutorial_4.png"&gt;&lt;/p&gt;
&lt;p&gt;Now we will perform the other half of the setup process on Github.  Login to Github and open up the repository for username.github.io.  Click on the settings icon.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/google_domains_tutorial_5.png"&gt;&lt;/p&gt;
&lt;p&gt;Look for the Github Pages section of the settings menu.  Type &lt;em&gt;yourdomain.com&lt;/em&gt; in the Custom Domain field and click save.  Also check the box to enforce HTTPS to ensure your website will be served securely.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/google_domains_tutorial_6.png"&gt;&lt;/p&gt;
&lt;p&gt;When we clicked save Github automatically created a file called CNAME in the root directory of our repository.  The CNAME file tells Github Pages to redirect any traffic to username.github.io to &lt;em&gt;yourdomain.com&lt;/em&gt; instead.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/google_domains_tutorial_7.png"&gt;&lt;/p&gt;
&lt;p&gt;Our website is now setup to be served from &lt;em&gt;yourdomain.com&lt;/em&gt;.  The changes will not take effect immediately but after a few minutes we should be able to access our website from &lt;em&gt;yourdomain.com&lt;/em&gt;.  Also try browsing to username.github.io and you will notice the web address is redirected to &lt;em&gt;yourdomain.com&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/google_domains_tutorial_8.png"&gt;&lt;/p&gt;
&lt;h3&gt;Configuring Git&lt;/h3&gt;
&lt;p&gt;When we added the CNAME file to our remote repository on Github it went out of sync with the repo on our local machine.  Open up the command line type the following command while in the &lt;em&gt;blog/output&lt;/em&gt; folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git pull
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The CNAME file is now added the local repository.  This creates another issue: when we generate the website in Pelican the output folder gets deleted before it is loaded with new files.  We need to create an exception for CNAME to avoid this.  Open &lt;em&gt;pelicanconf.py&lt;/em&gt; in the source folder and add the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;OUTPUT_RETENTION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test the new settings to ensure they work.  When we generate the website CNAME should remain intact in the &lt;em&gt;output&lt;/em&gt; folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="google domains"></category><category term="github"></category><category term="website deployment"></category></entry><entry><title>Deploying A Static Website To Github Pages</title><link href="/posts/2019/03/10/deploying-a-static-website-to-github-pages/" rel="alternate"></link><published>2019-03-10T12:00:00-05:00</published><updated>2019-03-10T12:00:00-05:00</updated><author><name>Matthew Devaney</name></author><id>tag:None,2019-03-10:/posts/2019/03/10/deploying-a-static-website-to-github-pages/</id><summary type="html">&lt;p&gt;So you've built a static website and you want to share it with the world. Now you just need to get it up and running on the web.  After doing some research you realize there are so many options for deployment and everyone has their own opinion.  How do I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So you've built a static website and you want to share it with the world. Now you just need to get it up and running on the web.  After doing some research you realize there are so many options for deployment and everyone has their own opinion.  How do I choose the best method?  Where can I find instructions?  It all seems so overwhelming.  At least that's how it felt for me.&lt;/p&gt;
&lt;p&gt;There are a few reasons I like Github Pages for the task of hosting a small static website.  The service is free (as in beer), its reliable and I already use Github repositories to store the source code for my software projects so the workflow comes naturally.  &lt;/p&gt;
&lt;p&gt;The second is, it's free (as in beer).&lt;/p&gt;
&lt;p&gt;In this tutorial I will show you a simple method for deploying your own static website and its source code to Github Pages.  If you don't know how to build a static website and want to learn consider checking out &lt;a href="/posts/2019/03/04/build-a-blog-with-python-and-pelican-pt-1-installation-theme/"&gt;Part 1&lt;/a&gt; and &lt;a href="/posts/2019/03/07/build-a-blog-with-python-and-pelican-pt-2-creating-content/"&gt;Part 2&lt;/a&gt; of my Pelican tutorial.&lt;/p&gt;
&lt;h4&gt;Prequisites&lt;/h4&gt;
&lt;p&gt;A basic understanding of the &lt;a href="https://git-scm.com/"&gt;Git&lt;/a&gt; and &lt;a href="https://github.com/"&gt;Github&lt;/a&gt; is required.  You will also need to sign up for a free Github account if you don't already have one.&lt;/p&gt;
&lt;h4&gt;Goals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Create Github repositories for your static website and its source code.&lt;/li&gt;
&lt;li&gt;Go-live with your website on Github Pages&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Deployment To Github Pages&lt;/h3&gt;
&lt;p&gt;When building a static website it is a good idea to keep your website and its source code in two separate folders.  To make things simple let's call the folders output and source just like the website in my Pelican tutorial.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
└── output
└── source
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are going to create two Github repositories: one to hold the static website and another to hold its source code.  The repository for the output folder must follow the pattern &lt;em&gt;username.github.io&lt;/em&gt;.  This is how Github knows how to display the repo's contents as a website.  The repository for the source folder can have any name we would like.  We will use the repo name &lt;em&gt;blog_source&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
└── output (repo: username.github.io)
└── source (repo: blog_source)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Login to Github and create a new repository called &lt;em&gt;username.github.io&lt;/em&gt;.  Replace the word username with your actual Github user name.  Make the website public and do not initialize it with a readme file.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/github_pages_tutorial_1.png"&gt;&lt;/p&gt;
&lt;p&gt;Immediately create a second repository called &lt;em&gt;blog_source&lt;/em&gt; as well using the same settings as the first.  Now we have two empty Github repositories.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/github_pages_tutorial_2.png"&gt;&lt;/p&gt;
&lt;p&gt;Open up the command line.  If you are following along from a previous tutorial we should generate the website prior to deployment.  Generate the website using the command below.  We append -s publishconf.py to use settings that should only be applied when the website is being published.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;publishconf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now its time to use Git.  While in the &lt;em&gt;blog/output&lt;/em&gt; folder run the following git commands in order to push our files to the yourekittenme.github.io repository.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
git remote add origin https://github.com/yourekittenme/yourekittenme.github.io
git add -A
git commit -m &amp;quot;initial commit&amp;quot;
git push --set-upstream origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, navigate to the &lt;em&gt;blog/source&lt;/em&gt; folder run the following git commands in order to push our files to the blog_source repository:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git init
git remote add origin https://github.com/yourekittenme/code_blog
git add -A
git commit -m &amp;quot;initial commit&amp;quot;
git push --set-upstream origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After running both sequences of Git commands we should be able to see our files loaded inti their respective repositories on Github.  To view our website type https://username.github.io into your web browser.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/github_pages_tutorial_3.png"&gt;&lt;/p&gt;
&lt;h3&gt;Next steps&lt;/h3&gt;
&lt;p&gt;We have now successfully deployed the static website.  Optionally, we can use a custom domain to replace username.github.io.  If you would like to see how that's done follow along to the &lt;a href="/posts/2019/03/12/custom-domains-with-github-pages-and-google-domains/"&gt;next tutorial&lt;/a&gt;.&lt;/p&gt;</content><category term="github"></category><category term="git"></category><category term="website deployment"></category></entry><entry><title>Build A Blog With Python And Pelican - Pt. 2 Creating Content</title><link href="/posts/2019/03/07/build-a-blog-with-python-and-pelican-pt-2-creating-content/" rel="alternate"></link><published>2019-03-07T12:00:00-06:00</published><updated>2019-03-07T12:00:00-06:00</updated><author><name>Matthew Devaney</name></author><id>tag:None,2019-03-07:/posts/2019/03/07/build-a-blog-with-python-and-pelican-pt-2-creating-content/</id><summary type="html">&lt;p&gt;Static website generators take content stored in a plain-text format, apply it to an HTML template and render all of the files required to build the website.  In the previous tutorial we installed a theme which included templates.  Now we will learn how to write the content for our blog …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Static website generators take content stored in a plain-text format, apply it to an HTML template and render all of the files required to build the website.  In the previous tutorial we installed a theme which included templates.  Now we will learn how to write the content for our blog, store content, and keep it all organized.&lt;/p&gt;
&lt;h4&gt;Prequisites&lt;/h4&gt;
&lt;p&gt;This is the 2nd tutorial in a series on how to build a static website with Pelican.  If you haven't already done so go back to &lt;a href="/posts/2019/03/04/build-a-blog-with-python-and-pelican-pt-1-installation-theme/"&gt;Part 1&lt;/a&gt; and start from the beginning.&lt;/p&gt;
&lt;h4&gt;Goals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Create articles and pages with Markdown&lt;/li&gt;
&lt;li&gt;Define the file structure of both our source code and generated website&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Writing Articles With Markdown&lt;/h3&gt;
&lt;p&gt;Whenever we create new content for our blog it will always follow the same basic process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new markdown file in the &lt;em&gt;content&lt;/em&gt; folder&lt;/li&gt;
&lt;li&gt;Define the file metadata&lt;/li&gt;
&lt;li&gt;Write the content&lt;/li&gt;
&lt;li&gt;Regenerate the website&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To learn how to create content we are going to write multiple blog posts.  Let's begin by creating a new markdown file called &lt;em&gt;first_post.md&lt;/em&gt; in the &lt;em&gt;content&lt;/em&gt; folder.  A markdown file is simply a plain &lt;em&gt;.txt&lt;/em&gt; file with the extension changed to &lt;em&gt;.md&lt;/em&gt;.  If are unsure what Markdown that's OK for now. We will discuss that shortly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
└── source
     ├── content
     |   └── first_post.md (new)
     ├── plugins
     └── theme
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we will define the metadata for first_post.md.  Metadata is information about the blog post.  It gives Pelican direction on how to generate the static website files and some of the metadata will be displayed within the webpage itself. Open the blank &lt;em&gt;first_post.md&lt;/em&gt; and add the following lines:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Blog&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Matthew&lt;/span&gt; &lt;span class="n"&gt;Devaney&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blogging&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;Slug&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;my&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;

&lt;span class="n"&gt;Blog&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;goes&lt;/span&gt; &lt;span class="n"&gt;here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Metadata should always appear at the top of the file.  Each piece of metadata must be on a new line and follows the format &lt;em&gt;metadata_keyword: data&lt;/em&gt;.  Here's a list of the most common keywords and their usage:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Keyword&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt;
&lt;th&gt;Required?&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt;
&lt;th&gt;Usage&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Title&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;title of the blog post&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Author&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;author of the blog post&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Date&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;published date in the format YYYY-mm-dd hh:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Modified&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;last edit date in the format YYYY-mm-dd hh:mm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Category&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;general topic of the blog post&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tags&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;topics covered in the blog post separated by a comma&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Summary&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;brief one or two sentence synopsis of the blog post&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Slug&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;name of the .html file to be generated. If none is defined the slug will be the post's title separated by "-" symbols&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Status&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;choose one of published, draft or hidden&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Regenerate the website to view the result.  Our first post is now showing on the main blog page. Take a moment to browse the post and consider how the metadata we supplied affected the webpage that was generated.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="some text" src="/img/pelican_tutorial_4.png"&gt;&lt;/p&gt;
&lt;p&gt;Now we will use Markdown to write our post's content. Markdown is a language written for non-programmers that uses symbols to represent HTML.  We apply markdown to a plain text file with the extension .md to do things link change the style (e.g. bold, italics), insert pictures and create links.  When we use Pelican to generate our website it will read the markdown file and convert it to HTML.&lt;/p&gt;
&lt;p&gt;Anyone can learn the basics of Markdown in about 10 minutes.  The language's syntax is very well documented on the web so we will not discuss it in full detail here.  Instead we will review a few sample posts to understand the basics which will include examples specific to Pelican.  I recommend you check out either the &lt;a href="https://www.markdownguide.org/"&gt;interactive tutorial&lt;/a&gt; at markdownguide.org or Adam Pritchard's &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;Markdown Cheatsheet&lt;/a&gt; on Github before moving on with the tutorial.&lt;/p&gt;
&lt;p&gt;Create a file called &lt;em&gt;markdown_examples_1.md" in the same location as &lt;/em&gt;first_post.md*.  Insert the following text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt; &lt;span class="n"&gt;Examples&lt;/span&gt; &lt;span class="n"&gt;Part&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Matthew&lt;/span&gt; &lt;span class="n"&gt;Devaney&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blogging&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;

&lt;span class="n"&gt;Basic&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="n"&gt;examples&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;shown&lt;/span&gt; &lt;span class="n"&gt;below&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;bold&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;__bold__&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;italic&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="n"&gt;_italic_&lt;/span&gt;

&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;_italic&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;bold_&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;h1&lt;/span&gt; &lt;span class="n"&gt;heading&lt;/span&gt;
&lt;span class="err"&gt;##&lt;/span&gt; &lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;h2&lt;/span&gt; &lt;span class="n"&gt;heading&lt;/span&gt;
&lt;span class="err"&gt;###&lt;/span&gt; &lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;h3&lt;/span&gt; &lt;span class="n"&gt;heading&lt;/span&gt;&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="err"&gt;######&lt;/span&gt; &lt;span class="n"&gt;An&lt;/span&gt; &lt;span class="n"&gt;h6&lt;/span&gt; &lt;span class="n"&gt;heading&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;One&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Two&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Three&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;bullets&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Bullet&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Bullet&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Bullet&lt;/span&gt;

&lt;span class="n"&gt;Here&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s a blockquote:&lt;/span&gt;

&lt;span class="s1"&gt;&amp;amp;gt; Simple is better than complex&lt;/span&gt;

&lt;span class="s1"&gt;Here&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;

&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Column1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="o"&gt;|---|---|---|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;Value&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now generate the website and review our post.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The post we wrote shows the basics of how to use Markdown.  When the website was generated the Markdown was converted into HTML. HTML elements can be used when writing a markdown file but the markdown syntax is much simpler to write. Use of HTML should be the exception and not the rule.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/pelican_tutorial_5.png"&gt;&lt;/p&gt;
&lt;p&gt;Let's prepare to write our second post.  Download the python icon image we will be using by clicking on this &lt;a href="/img/python_icon.png"&gt;link&lt;/a&gt;.  Copy the image to the content folder as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
└── source
     ├── content
     |   └── first_post.md
     |   └── markdown_example_1.md
     |   └── python_icon.png (new)
     ├── plugins
     └── theme
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a file called &lt;em&gt;markdown_examples_2.md" in the same location as &lt;/em&gt;first_post.md&lt;em&gt; and &lt;/em&gt;markdown_examples_1.md*.  Insert the following text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nl"&gt;Title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt; &lt;span class="n"&gt;Examples&lt;/span&gt; &lt;span class="n"&gt;Part&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nl"&gt;Author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Matthew&lt;/span&gt; &lt;span class="n"&gt;Devaney&lt;/span&gt;
&lt;span class="nl"&gt;Date&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;03&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt;
&lt;span class="nl"&gt;Category&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blogging&lt;/span&gt;
&lt;span class="nl"&gt;Tags&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;

&lt;span class="n"&gt;Images&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;displayed&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="n"&gt;brackets&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;goes&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;round&lt;/span&gt; &lt;span class="n"&gt;brackets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;indicates&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;stored&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;folder&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="n"&gt;setting&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;changed&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python_icon&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Links&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;downloadable&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="n"&gt;such&lt;/span&gt; &lt;span class="n"&gt;as&lt;/span&gt; &lt;span class="n"&gt;PDF&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;written&lt;/span&gt; &lt;span class="n"&gt;similarly&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;image&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;but&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;symbol&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;beginning&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="n"&gt;Documenation&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;different&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;our&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;written&lt;/span&gt; &lt;span class="n"&gt;exactly&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;same&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;Text&lt;/span&gt; &lt;span class="n"&gt;within&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;square&lt;/span&gt; &lt;span class="n"&gt;brackets&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;clicked&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;travel&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;between&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;curly&lt;/span&gt; &lt;span class="n"&gt;brackets&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="n"&gt;tag&lt;/span&gt; &lt;span class="n"&gt;indicates&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;want&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;follow&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;webpage&lt;/span&gt; &lt;span class="n"&gt;rather&lt;/span&gt; &lt;span class="n"&gt;than&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;it&lt;/span&gt; &lt;span class="n"&gt;was&lt;/span&gt; &lt;span class="n"&gt;generated&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;first_post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Or&lt;/span&gt; &lt;span class="n"&gt;we&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;another&lt;/span&gt; &lt;span class="n"&gt;external&lt;/span&gt; &lt;span class="n"&gt;website&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;supplying&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt; &lt;span class="n"&gt;address&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;

&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Python&lt;/span&gt; &lt;span class="n"&gt;Package&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="nl"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//pypi.org)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generate the website and review the result.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="some text" src="/img/pelican_tutorial_6.png"&gt;&lt;/p&gt;
&lt;p&gt;For our final blog post we will write a Python code block. Pelican displays code blocks using the popular &lt;a href="https://pygments.org"&gt;Pygments&lt;/a&gt; snytax highlighter. You will recall we setup the Pygments &lt;a href="https://help.farbox.com/pygments.html"&gt;theme&lt;/a&gt; 'monokai' in &lt;em&gt;pelicanconf.py&lt;/em&gt; earlier.  Also, Pygments is not limited to only Python.  It can handle almost any language you can think of. Check out the list of supported languages &lt;a href="http://pygments.org/languages/"&gt;here&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Create a file called *markdown_examples_3.md" in the content folder.  Insert the following text:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt; &lt;span class="n"&gt;Examples&lt;/span&gt; &lt;span class="n"&gt;Part&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;Author&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Matthew&lt;/span&gt; &lt;span class="n"&gt;Devaney&lt;/span&gt;
&lt;span class="n"&gt;Date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;04&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="n"&gt;Category&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;blogging&lt;/span&gt;
&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pygments&lt;/span&gt;

&lt;span class="n"&gt;Code&lt;/span&gt; &lt;span class="n"&gt;blocks&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;preceeded&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;three&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;symbols&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  
&lt;span class="n"&gt;All&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;following&lt;/span&gt; &lt;span class="n"&gt;code&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;highlighted&lt;/span&gt; &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;indented&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

    &lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;do_twice&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;wrapper_do_twice&lt;/span&gt;&lt;span class="o"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;func&lt;/span&gt;&lt;span class="o"&gt;(*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;wrapper_do_twice&lt;/span&gt;

    &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;do_twice&lt;/span&gt;
    &lt;span class="n"&gt;def&lt;/span&gt; &lt;span class="n"&gt;say_whee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_text&lt;/span&gt;&lt;span class="o"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;some_text&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Whee!&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;say_whee&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generate the site one last time and review the code block.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="some text" src="/img/pelican_tutorial_7.png"&gt;&lt;/p&gt;
&lt;h3&gt;Writing Pages vs. Articles&lt;/h3&gt;
&lt;p&gt;Written content in Pelican takes one of two forms: &lt;em&gt;articles&lt;/em&gt; or &lt;em&gt;pages&lt;/em&gt;.  Articles are frequently updated content that can be ordered by date.  Our blog posts are all examples of articles.  Pages are more permanent in nature and are not associated with dates such as an &lt;em&gt;about me&lt;/em&gt; page.  They only appear on the navigation bar of our blog and not the list of recent posts.  We are going to make an &lt;em&gt;about me&lt;/em&gt; page for our blog.&lt;/p&gt;
&lt;p&gt;Pelican determines which content is pages vs. articles based on where it is located in the filesystem.  Make a new folder called &lt;em&gt;pages&lt;/em&gt; within the content folder and then create a new markdown file &lt;em&gt;about_me&lt;/em&gt; as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
└── source
     └── content
          └── pages
              └── about_me.md
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Page content is written exactly the same as articles, however, less metadata is required.  We do not need to include a category or tags. Date and modified are also not necessary but we will still include them in case we want to know this information in the future.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;About&lt;/span&gt; &lt;span class="n"&gt;Me&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;
&lt;span class="n"&gt;modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;01&lt;/span&gt;
&lt;span class="n"&gt;status&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;published&lt;/span&gt;

&lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Matthew&lt;/span&gt; &lt;span class="n"&gt;Devaney&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="n"&gt;work&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;accountant&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Winnipeg&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;  &lt;span class="n"&gt;My&lt;/span&gt; &lt;span class="n"&gt;hobby&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;making&lt;/span&gt; &lt;span class="n"&gt;websites&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generate the website and navigate to the about me page to view the result of our work.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="some text" src="/img/pelican_tutorial_8.png"&gt;&lt;/p&gt;
&lt;h3&gt;Keeping The Content Folder Organized&lt;/h3&gt;
&lt;p&gt;A small content-oriented website such as our blog can quickly grow into a large website as time goes on.  Organizing the file structure of our website in a logical manner will help us minimize the difficulty of maintaining our blog, leaving us more time to spend productively on creating new content.  Look at the diagram below which shows our current setup of the content folder.  A flat file structure like this one might be fine to use for a blog with 10 posts but it would become significantly harder after 100 posts.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
└── source
     └── content
          └── pages
          |   └── about_me.md
          └── first_post.md
          └── markdown_example_1.md
          └── markdown_example_2.md
          └── markdown_example_3.md
          └── pelican.pdf         
          └── python_icon.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We are going to create a file-structure that is organized by content type instead.  Create a folder folder named &lt;em&gt;articles&lt;/em&gt; in the content folder.  Move the article files into the folder exactly as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
└── source
     └── content
          └── articles
          |   └── first_post.md
          |   └── markdown_example_1.md
          |   └── markdown_example_2.md
          |   └── markdown_example_3.md
          └── pages
          |   └── about_me.md
          └── pelican.pdf         
          └── python_icon.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelican expects articles to be located in the content folder by default. To tell Pelican where to find our articles add a new line to &lt;em&gt;pelicanconf.py&lt;/em&gt;. The article path is built by combining the PATH and ARTICLE_PATHS variables into a file path.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; :::python3     
 ARTICLE_PATHS = [&amp;#39;articles&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We've changed the location of our articles so any links in our blog posts must be manually updated to the new path.  Open the file &lt;em&gt;markdown_examples_2.md&lt;/em&gt; and change the link to &lt;em&gt;first_post.md&lt;/em&gt; as follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt;     
 &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;First&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;&lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;first_post&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we will organize our blog's media files.  Create two new folders: &lt;em&gt;img&lt;/em&gt; and &lt;em&gt;pdf&lt;/em&gt; within the content folder.  Place the appropriate files in each folder as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
└── source
     └── content
          └── articles
          |   └── first_post.md
          |   └── markdown_example_1.md
          |   └── markdown_example_2.md
          |   └── markdown_example_3.md
          └── img
          |   └── python_icon.png
          └── pages
          |   └── about_me.md
          └── pdf
              └── pelican.pdf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once again we must tell Pelican where to look for the static media files we just moved.  Add the following code to &lt;em&gt;pelicanconf.py&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;img&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pdf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Open &lt;em&gt;markdown_examples_2.md&lt;/em&gt; and change the path of the static files there as well.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;logo&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python_icon&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;png&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Pelican&lt;/span&gt; &lt;span class="n"&gt;Documenation&lt;/span&gt;&lt;span class="p"&gt;]({&lt;/span&gt;&lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Lastly, we have the option to define where Pelican should look for our blog's pages.  By default Pelican expects them to be in the content/pages folder.  It is not necessary to state the path but it is a good practice to do so.  Add the following code to &lt;em&gt;pelicanconf.py&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;  :::python3     
 PAGE_PATHS = [&amp;#39;pages&amp;#39;]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generate the site and check that the changes we made do not raise any errors during the process.  Our blog should output in exactly the same manner as before we started making alterations and no changes to the layout or content of our website should be evident.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we've got the content folder organized let's turn our attention to the file structure that gets output when we generate our site.&lt;/p&gt;
&lt;h3&gt;Defining the URL Structure&lt;/h3&gt;
&lt;p&gt;We should aim to make the file structure of our generated website, and consequently the URL, as simple as possible.  Logically constructed URLs that are readable by humans are more likely to be shared and to be successfully indexed by a search engine.&lt;/p&gt;
&lt;p&gt;Let's use the post &lt;em&gt;Markdown Examples 3&lt;/em&gt; as an example.  Browse to the post and you will see the URL below. The title of the post is showing as a slug after the domain.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://127.0.0.1:8000/markdown-examples-part-3.html.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should change the URL to show the content type and date as well.  The ARTICLE_URL variable states what should display in the web browser's address bar while the ARTICLE_SAVE_AS variable defines where the article being generated should be output to. Add the following code to &lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ARTICLE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articles/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ARTICLE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;articles/{date:%Y}/{date:%m}/{date:&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;}/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generate the webpage after making changes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now the article URL appears as:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://127.0.0.1:8000/articles/2019/01/04/markdown-examples-part-3/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go ahead do the same procedure for pages, categories, and tags.  Add the following code to &lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PAGE_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pages/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;PAGE_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pages/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;category/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;category/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;/index.html&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tag/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TAG_SAVE_AS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;tag/&lt;/span&gt;&lt;span class="si"&gt;{slug}&lt;/span&gt;&lt;span class="s1"&gt;/index.html&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generate the blog again and review how the URLs have changed.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;In this tutorial we learned how to write new articles and pages using Markdown, keep the content folder organized and define the URL structure of our website.  We are finally ready to deploy our site to the web and share it with others.  Check out my tutorial on &lt;a href="/posts/2019/03/10/deploying-a-static-website-to-github-pages/"&gt;Deployment to Github Pages&lt;/a&gt; for more details.&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="markdown"></category></entry><entry><title>Build A Blog With Python And Pelican - Pt. 1 Installation &amp; Theme</title><link href="/posts/2019/03/04/build-a-blog-with-python-and-pelican-pt-1-installation-theme/" rel="alternate"></link><published>2019-03-04T20:30:00-06:00</published><updated>2019-03-04T20:30:00-06:00</updated><author><name>Matthew Devaney</name></author><id>tag:None,2019-03-04:/posts/2019/03/04/build-a-blog-with-python-and-pelican-pt-1-installation-theme/</id><summary type="html">&lt;p&gt;Building your own static website has several advantages over a traditional website that uses a database to store content.  Static websites are faster because pages are rendered in advance and deliver the same content to all visitors.  They are cheaper to host and are more secure since the website has …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Building your own static website has several advantages over a traditional website that uses a database to store content.  Static websites are faster because pages are rendered in advance and deliver the same content to all visitors.  They are cheaper to host and are more secure since the website has no database.  No advanced programming knowledge is required to build one: HTML &amp;amp; CSS will do.&lt;/p&gt;
&lt;p&gt;Creating each page in a static website one-by-one and updating them when something changes would be very time consuming.  Static site generators take a website's content, apply it to HTML-based templates and generate all of the required files ready-to-upload.  There are many static website generators available on the web and which one you choose will depend on the language you are most comfortable with.  I chose &lt;a href="https://docs.getpelican.com/en/stable/"&gt;Pelican&lt;/a&gt; because of my preference for Python but &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; (Ruby) and &lt;a href="https://gohugo.io/"&gt;Hugo&lt;/a&gt; (Go) are perfectly acceptable solutions as well. &lt;/p&gt;
&lt;p&gt;This tutorial is part of a series which will walkthrough all the steps from installing Pelican to deployment on Github Pages (for free).  I decided to create these tutorials after making my own website with Pelican.  &lt;/p&gt;
&lt;h4&gt;Prequisites&lt;/h4&gt;
&lt;p&gt;All you need to know is a little bit of Python and have a basic understanding of HTML &amp;amp; CSS.  We will be testing our website locally so no knowledge of how to deploy to the web is required.&lt;/p&gt;
&lt;h4&gt;Goals&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Install Pelican&lt;/li&gt;
&lt;li&gt;Generate a static website&lt;/li&gt;
&lt;li&gt;Setup the pelican-bootstrap3 theme&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Creating A Project Skeleton&lt;/h3&gt;
&lt;p&gt;Let's begin by creating a new folder called &lt;em&gt;blog&lt;/em&gt;.  Then create two new folders inside the blog folder called &lt;em&gt;output&lt;/em&gt; and &lt;em&gt;source&lt;/em&gt; as shown below.  Our Pelican project will be stored in the source folder.  The static website generated by Pelican will be placed in the output folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;blog&lt;/span&gt;
  &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;
  &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next we need to install Pelican and Markdown.  Markdown is a plain-text markup language we will be using to write the content for our website.  Open the command line and type the following commands:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With our basic file structure in-place and Pelican/Markdown installed we are now ready to create our Pelican project.  Navigate to the source folder using the command line and type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pelican starts by asking us a series of interview questions to customize our website.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Where do you want to create your new web site? [.] .
What will be the title of this web site? Matthew Devaney&amp;#39;s Blog
Who will be the author of this web site? Matthew Devaney
What will be the default language of this web site? [English] en
Do you want to specify a URL prefix? e.g., https://example.com   (Y/n) n
Do you want to enable article pagination? (Y/n) n
What is your time zone? [Europe/Paris] America/Winnipeg
Do you want to generate a tasks.py/Makefile to automate generation and publishing? (Y/n) n
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;How you choose to answer some of these questions will differ from myself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Default language:  choose any 2 letter code for languages from the &lt;a href="https://www.loc.gov/standards/iso639-2/php/code_list.php"&gt;ISO 639.1&lt;/a&gt; guide.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Time zone: select your timezone from the Wikipedia &lt;a href="http://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;list of tz database time zones&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate Tasks.py/Makefile: Mac and Linux machines can use the &lt;em&gt;make&lt;/em&gt; command to automate deployment. However, I am using a Windows machine make is not available on Windows by default. You can try to &lt;a href="http://gnuwin32.sourceforge.net/packages/make.htm"&gt;install&lt;/a&gt; it but getting make to work on Windows is a non-trival exercise.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After answering the pelican-quickstart interview questions your source folder will look like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
  ├──  output
  └── source
       ├── content (folder)
       ├── output (folder)
       ├── pelicanconf.py
       └── publishconf.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's what each of the newly created files do:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;content (folder) -  where website content will be stored&lt;/li&gt;
&lt;li&gt;output (folder) - default location where static website files are generated to&lt;/li&gt;
&lt;li&gt;pelicanconf.py - website settings file&lt;/li&gt;
&lt;li&gt;publishconf.py - additional website settings used only when the website is published&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that our basic project skeleton is setup we should generate our website and preview what it looks like.  First, we must tell Pelican where to output the website to.  By default it will be generated to blog/source/output ut we wanted them to appear in blog/output instead.  Delete the folder blog/source/output.  Now open &lt;em&gt;pelicanconf.py&lt;/em&gt; and add the following line: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;OUTPUT_PATH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../output&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Generate the website by using the following command while in the source folder.  Ignore the warning that appears.  It displays because we haven't written any articles for our website yet:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, run the following command while in the source folder to setup a local http server to serve our website on our local machine.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican --listen
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To view our website open your web browser and go to the the address. &lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/pelican_tutorial_1.png"&gt;&lt;/p&gt;
&lt;p&gt;We have now successfully setup our basic Pelican project.&lt;/p&gt;
&lt;h3&gt;Installing The Pelican Bootstrap 3 Theme&lt;/h3&gt;
&lt;p&gt;In my opinion the standard theme that comes with Pelican has a huge flaw: it does not display properly on mobile devices.  More than half of the world's internet traffic is mobile so we will want to use a theme that incorporates &lt;a href="https://en.wikipedia.org/wiki/Responsive_web_design"&gt;responsive web design&lt;/a&gt; principles.  To accomplish this we will change our website to use the excellent &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; theme. To view the full listing of Pelican themes click &lt;a href="https://github.com/getpelican/pelican-themes"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Start by creating a new folder called &lt;em&gt;theme&lt;/em&gt; in the source folder.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
  └── source
       ├── content
       └── theme (new)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now we need to tell Pelican where it can find the custom theme we will be using.  Open &lt;em&gt;pelicanconf.py&lt;/em&gt; and add the following line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;theme&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, go to GitHub and download the &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/pelican-bootstrap3"&gt;pelican-bootstrap3&lt;/a&gt; theme.  Place pelican-bootstrap3 files into the blog/source/theme folder so it looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
  └── source
       ├── content
       └── theme
           ├── static
           ├── templates
           ├── translations
           | ...(more files)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With the theme in place now let's attempt to generate the site.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Unfortunately, an error occurs.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CRITICAL&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UndefinedError&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;undefined&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The error is caused by a missing plugin &lt;em&gt;i18n_subsites&lt;/em&gt; which is used by pelican-bootstrap3 to provide support for internationalization (i.e. i18n). We must &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/i18n_subsites"&gt;download this file&lt;/a&gt; from Github and in include it in our project. To view the full listing of Pelican plugins click &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/i18n_subsites"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Add another folder inside the source called plugins. Place the i18n_subsites plugin you downloaded from Github into that folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;blog
  └── source
       ├── content
       ├── plugins (new)
       |   └── i18n_subsites (new)
       └── theme
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We must tell pelican where the plugins folder is located just as we did for the theme folder.  Open &lt;em&gt;pelicanconf.py&lt;/em&gt; and add the following line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGIN_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;plugins/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A typical Pelican website will utilize many different plugins to extend its capabilities. Each plugin must be setup individually within &lt;em&gt;pelicanconf.py&lt;/em&gt;.  The PLUGINS variable contains all plugins being used by the website.  Open &lt;em&gt;pelicanconf.py&lt;/em&gt; and add the following line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;i18n_subsites&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Try to generate the website once again.  You will get a different error this time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pelican content

CRITICAL: UndefinedError: &amp;#39;gettext&amp;#39; is undefined
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The i18n_subsites plugin relies on a language called Jinja2. To properly configure the i18n_subsites plugin we must also add the JINJA_ENVIRONMENT variable to &lt;em&gt;pelicanconf.py&lt;/em&gt; as shown below. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;JINJA_ENVIRONMENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extensions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jinja2.ext.i18n&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now that we have properly configured the bootstrap3 theme and its dependencies our website will generate successfully.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;View the latest version of our website at &lt;a href="http://127.0.0.1:8000"&gt;http://127.0.0.1:8000&lt;/a&gt;.  Notice when you expand and shrink the width of the web browser window the website layout changes to fit?  By selecting a theme that incorporates responsive web design principles our website will be viewable on screens of all shapes and sizes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="some text" src="/img/pelican_tutorial_2.png"&gt;&lt;/p&gt;
&lt;p&gt;The pelican-bootstrap3 theme comes with several options to change the style of our website.  To view the full list of  available themes go the folder blog/source/theme/css.  You will see several files with the filename &lt;em&gt;bootstrap.(some name).min.css.  We will be using the the &lt;/em&gt;bootstrap.flatly.min.css&lt;em&gt; file to style our website. Open &lt;/em&gt;pelicanconf.py* and add the following line.  Take a moment to try out some other options if you'd like to see what's available.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;BOOTSTRAP_THEME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flatly&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this time we can also change the style for code blocks we may write in our blog posts.  Pelican displays code blocks using the &lt;a href="https://help.farbox.com/pygments.html"&gt;Pygments&lt;/a&gt; code highlighter. To view a full list of the available Pygments styles go to the folder blog/source/theme/css/pygments. Our website will use &lt;em&gt;monokai.css&lt;/em&gt; to style code blocks.  Add the following line to &lt;em&gt;pelicanconf.py&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PYGMENTS_STYLE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;monokai&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's update the sidebar too with our own preferred links and social pages.  You can use the websites shown below or choose your own.  Update the following line in &lt;em&gt;pelicanconf.py&lt;/em&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Ars Technica&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://arstechnica.com/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Wikipedia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://wikipedia.org&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;

&lt;span class="n"&gt;SOCIAL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Twitter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://twitter.com/mbdevaney&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Github&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://github.com/yourekittenme&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Regenerate the website to see the impact of changing the style.  Not all of the changes we made to the style are apparent at this time because our website does not yet have any content.  In the next section of this tutorial we will learn how create articles and pages for our blog.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="some text" src="/img/pelican_tutorial_3.png"&gt;&lt;/p&gt;
&lt;h3&gt;Next Steps&lt;/h3&gt;
&lt;p&gt;In this part of the tutorial we learned how to install Pelican, generate a static website and apply the pelican-bootstrap3 theme. Take a quick break then head on over to &lt;a href="/posts/2019/03/07/build-a-blog-with-python-and-pelican-pt-2-creating-content/"&gt;Part 2&lt;/a&gt; of the tutorial.&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category></entry></feed>